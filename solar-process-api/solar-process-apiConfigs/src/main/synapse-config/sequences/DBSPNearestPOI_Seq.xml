<?xml version="1.0" encoding="UTF-8"?>
<sequence name="DBSPNearestPOI_Seq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <propertyGroup>
        <property expression="get-property('query.param.long')" name="geox" scope="default" type="STRING"/>
        <property expression="get-property('query.param.lat')" name="geoy" scope="default" type="STRING"/>
        <property expression="get-property('query.param.radius')" name="aMar" scope="default" type="STRING"/>
        <property expression="get-property('query.param.category')" name="category" scope="default" type="STRING"/>
        <property expression="get-property('query.param.cityids')" name="cityids" scope="default" type="STRING"/>
        <property expression="get-property('query.param.page')" name="pageNumber" scope="default" type="STRING"/>
        <property expression="get-property('query.param.pagesize')" name="pagesize" scope="default" type="STRING"/>
        <property expression="get-property('query.param.format')" name="format" scope="default" type="STRING"/>
        <property expression="get-property('query.param.encode')" name="encode" scope="default" type="STRING"/>
    </propertyGroup>
    <propertyGroup>
        <property name="CommonLogFlowId" scope="default" type="STRING" value="PAPINearestSearchPOI"/>
        <property name="CommonLogInQueue" scope="default" type="STRING" value="GET -/PAPInearestPOI"/>
        <property expression="get-property('MessageID')" group="3" name="CommonLogLoggingId" pattern="((urn|uuid):)*(.*)" scope="default" type="STRING"/>
        <property expression="get-property('correlation_id')" name="CommonLogLoggingId2" scope="default" type="STRING"/>
        <property name="CommonLogMessageType" scope="default" type="STRING" value="application/json"/>
        <property name="CommonLogOutQueue" scope="default" type="STRING" value="GET -/PAPInearestPOI"/>
    </propertyGroup>
    <log level="full"/>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <filter regex="true" source="boolean(get-property('query.param.geox'))andboolean(get-property('query.param.geoy'))">
        <then>
            <log level="full" separator="---------in FILTER------------"/>
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{&#xd;
"msg":"please enter the geox and geoy"&#xd;
}</format>
                <args/>
            </payloadFactory>
        </else>
    </filter>
    <payloadFactory media-type="json">
        <format>{&#xd;
"geox":"$1",&#xd;
"geoy":"$2",&#xd;
"aMar":"$3",&#xd;
"category":"$4",&#xd;
"cityids":"$5",&#xd;
"pageNumber":"$6",&#xd;
"pageSize":"$7"&#xd;
}</format>
        <args>
            <arg evaluator="xml" expression="$ctx:geox"/>
            <arg evaluator="xml" expression="$ctx:geoy"/>
            <arg evaluator="xml" expression="$ctx:aMar"/>
            <arg evaluator="xml" expression="$ctx:category"/>
            <arg evaluator="xml" expression="$ctx:cityids"/>
            <arg evaluator="xml" expression="$ctx:pageNumber"/>
            <arg evaluator="xml" expression="$ctx:pagesize"/>
        </args>
    </payloadFactory>
    <log level="full"/>
    <property expression="$ctx:language" name="language" scope="default" type="STRING"/>
    <log level="full"/>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <call>
        <endpoint key="DBSPNearaestPOISys_EP"/>
    </call>
    <log level="full" separator="   NearestPOIafterEPPAPI"/>
    <call-template description="Common Log Templete" target="mi-CommonLog">
        <with-param name="flowId" value="{$ctx:CommonLogFlowId}"/>
        <with-param name="inQueue" value="{$ctx:CommonLogOutQueue}"/>
        <with-param name="outQueue" value="{$ctx:CommonLogInQueue}"/>
        <with-param name="loggingId" value="{$ctx:CommonLogLoggingId}"/>
        <with-param name="loggingId2" value="{$ctx:CommonLogLoggingId2}"/>
        <with-param name="messageType" value="{$ctx:CommonLogMessageType}"/>
        <with-param name="contentType" value="application/json"/>
    </call-template>
    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
var Addresses = constructAddress();

if(Object.keys(payload.Addresses).length > 0)
{
var transform = {
"totalSearchResults": payload.Addresses.length.toFixed(),
"Addresses":Addresses,
"PostCode":null,
 "success": true,
"result": null,
"statusdescription": "SUCCESS",
"fullexception": null
};
}
else
{
var transform = {
	"totalSearchResults": "0",
 "Addresses": null,
    "PostCode": null,
    "success": true,
    "result": null,
    "statusdescription": "NO-RESULTS",
    "fullexception": null
 };
}


mc.setPayloadJSON(transform);
function constructAddress () {
var Address=[];
for(i=0;i<payload.Addresses.length;i++) {
var d=payload.Addresses[i];
var data = {
               Title:  (null !=d.alias?d.alias :""),
			   Address1: ((null != d.buildingnumber? d.buildingnumber:"")+" "+(null != d.streetname? d.streetname:"")+" - "+(null != d.districtname? d.districtname:"")),
 Address2: ((null != d.cityname? d.cityname:"")+" "+(null != d.zipcode? d.zipcode:"")+(d.additionalnumber != ""? (" - "+d.additionalnumber):"")),
 ObjLatLng: ((null != d.objectid? d.objectid:"")+" "+(null != d.centroidx? d.centroidx:"")+" "+(null != d.centroidy? d.centroidy:"")+" "+(null != d.minx? d.minx:"")+" "+(null != d.miny? d.miny:"")+" "+(null != d.maxx? d.maxx:"")+" "+(null != d.maxy? d.maxy:"")),
                BuildingNumber: (null !=d.buildingnumber?d.buildingnumber :""),
				Street:  (null !=d.streetname?d.streetname :""),
                District: (null !=d.districtname?d.districtname :""),
                City: (null !=d.cityname?d.cityname :""),
				PostCode: (null !=d.zipcode?d.zipcode :""),
				AdditionalNumber: (null !=d.additionalnumber?d.additionalnumber :""),
				RegionName:  (null !=d.regionname?d.regionname :""),
				PolygonString: ( null !=d.polygonstring?d.polygonstring :null),
				IsPrimaryAddress: (null !=d.isprimaryaddress?d.isprimaryaddress :null),
				UnitNumber: (null !=d.unitnumber?d.unitnumber :null),
				Latitude: (null !=d.centroidy?d.centroidy :""),
				Longitude: (null !=d.centroidx?d.centroidx :""),
				CityId: (null !=d.cityid?d.cityid :""),
				RegionId:  (null !=d.regionid?d.regionid :""),
				Restriction: (null !=d.restriction?d.restriction :null),
				PKAddressID: (null !=d.PKAddressID?d.PKAddressID :""),
				DistrictID: (null !=d.districtid?d.districtid :""),
				Title_L2: (null !=d.alias_E?d.alias_E :""),
				RegionName_L2: (null !=d.regionname_E?d.regionname_E :""),
				City_L2:  (null !=d.cityname_E?d.cityname_E :""),
				Street_L2: (null !=d.streetname_E?d.streetname_E :""),
				District_L2: (null !=d.districtname_E?d.districtname_E :""),
				CompanyName_L2: (null !=d.companyname_E?d.companyname_E :""),
				GovernorateID: (null !=d.governorateid?d.governorateid :null),
				Governorate:  (null !=d.governoratename?d.governoratename :null),
				Governorate_L2:  (null !=d.governoratename_E?d.governoratename_E :null)
				
}
Address.push(data);
};
return Address;
}]]></script>
    <log level="full" separator="   NearestPOIAFterScript   "/>
    <filter regex="xml" source="$ctx:format">
        <then>
            <propertyGroup>
                <property expression="json-eval($.Addresses)" name="Address" scope="default" type="STRING"/>
                <property expression="json-eval($.success)" name="success" scope="default" type="STRING"/>
                <property expression="json-eval($.statusdescription)" name="statusdescription" scope="default" type="STRING"/>
                <property expression="json-eval($.totalSearchResults)" name="totalSearchResults" scope="default" type="STRING"/>
            </propertyGroup>
            <payloadFactory media-type="json">
                <format>{&#xd;
"Addresses":&#xd;
{&#xd;
"Address":$1&#xd;
}&#xd;
}</format>
                <args>
                    <arg evaluator="xml" expression="$ctx:Address"/>
                </args>
            </payloadFactory>
            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
            <payloadFactory media-type="xml">
                <format>
                    <AddressOutPutParams xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi=" http://www.w3.org/2001/XMLSchema-instance">
                        <success>true</success>
                        <statusdescription>SUCCESS</statusdescription>
                        <totalSearchResults>1</totalSearchResults>
$1
</AddressOutPutParams>
                </format>
                <args>
                    <arg evaluator="xml" expression="$body//jsonObject/Addresses"/>
                </args>
            </payloadFactory>
            <property name="contentType" scope="default" type="STRING" value="application/xml"/>
        </then>
        <else>
            <propertyGroup>
                <property name="contentType" scope="default" type="STRING" value="application/json"/>
                <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            </propertyGroup>
        </else>
    </filter>
</sequence>
